import requests
import base64
import json
import logging
from datetime import datetime

logging.basicConfig(filename="shrek_gen.log", level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# Function to read the chosen prompt from a file
def read_chosen_prompt():
    with open("chosen_prompt.txt", "r") as f:
        return f.read().strip()

# Define the API URL
api_url = "http://127.0.0.1:7860/sdapi/v1/txt2img"

# Read reoriented image file from disk
with open("D:\\sentiMation\\generators\\shrek_gen\\assets\\cn_shrek.png", "rb") as image_file:
    encoded_image = base64.b64encode(image_file.read()).decode('utf-8')

control_net_args = {
    "input_image": encoded_image,
    "module": "tile_resample",
    "model": "control_v11f1e_sd15_tile_fp16 [3b860298]",
    "weight": 1,
    "pixel_perfect": True
}

# Define the payload for animate_diff_args
animate_diff_args = {
    "model": "animatediffMotion_v15V2.ckpt",
    "format": ['MP4'],
    "enable": True,
    "video_length": 150,
    "fps": 30,
    "loop_number": 0,
    "closed_loop": "R+P",
    "batch_size": 8,
    "stride": 1,
    "overlap": -1,
    "interp": "NO",
    "interp_x": 10
}

# Read the prompt from the file generated by the first script
chosen_prompt = read_chosen_prompt()

# Define the JSON payload
json_payload = {
    "prompt": chosen_prompt,
    "negative_prompt": "bad quality, deformed, boring, mutation, amputation, missing appendage",
    "batch_size": 1,
    "sampler_name": "DDIM",
    "steps": 12,
    "cfg_scale": 10,
    "width": 512,
    "height": 512,
    "alwayson_scripts": {
        "AnimateDiff": {"args": [animate_diff_args]},
        "ControlNet": {"args": [control_net_args]}
    }
}

# Define headers
headers = {
    "Content-Type": "application/json"
}

# Call the API
response = requests.post(api_url, headers=headers, json=json_payload)

# Check for successful response
if response.status_code == 200:
    r = response.json()
    # Assuming 'images' key contains a list of base64 encoded strings
    if 'images' in r and r['images']:
        base64_data = r['images'][0]
        
        # Decode base64 (assuming the data is direct base64 of MP4, no additional splitting needed)
        mp4_data = base64.b64decode(base64_data)

        # Write the MP4 data to a file
        with open('lowscale.mp4', 'wb') as file:
            file.write(mp4_data)
        print("MP4 file saved as 'low_scale.mp4'.")
    else:
        print("No image data found in the response.")
else:
    print(f"API call failed. Status Code: {response.status_code}, Response: {response.text}")


# Debugging and Logging
if response.status_code == 200:
    logging.info(f"API call successful. Status Code: {response.status_code}")
    response_json = response.json()

    # Write JSON response to a file
    with open("api_response.txt", "w") as file:
        json.dump(response_json, file, indent=4)

else:
    logging.error(f"API call failed. Status Code: {response.status_code}, Response: {response.text}")
    response_json = {}
