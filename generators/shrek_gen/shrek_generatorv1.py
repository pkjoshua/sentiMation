import requests
import base64
import json
import logging
from datetime import datetime

# Function to read the chosen prompt from a file
def read_chosen_prompt():
    with open("chosen_prompt.txt", "r") as f:
        return f.read().strip()

# Define the API URL
api_url = "http://127.0.0.1:7860/sdapi/v1/txt2img"

# Read reoriented image file from disk
with open("D:\\sentiMation\\assets\\cn_shrek.png", "rb") as image_file:
    encoded_image = base64.b64encode(image_file.read()).decode('utf-8')

control_net_args = {
    "input_image": encoded_image,
    "module": "tile_resample",
    "model": "control_v11u_sd15_tile_fp16 [39a89b25]",
    "weight": 2,
    "pixel_perfect": True
}

# Define the payload for animate_diff_args
animate_diff_args = {
    "model": "mm_sd_v15_v2.ckpt",
    "format": ['MP4'],
    "enable": True,
    "video_length": 100,
    "fps": 10,
    "loop_number": 0,
    "closed_loop": "R+P",
    "batch_size": 16,
    "stride": 1,
    "overlap": -1,
    "interp": "NO",
    "interp_x": 10,
    "latent_power": 1,
    "latent_scale": 32,
    "last_frame": None,
    "latent_power_last": 1,
    "latent_scale_last": 32
}

# Read the prompt from the file generated by the first script
chosen_prompt = read_chosen_prompt()

# Define the JSON payload
json_payload = {
    "prompt": chosen_prompt,
    "negative_prompt": "bad quality, deformed, boring, mutation, amputation, missing appendage",
    "batch_size": 1,
    "sampler_name": "DPM++ 2M SDE Karras",
    "steps": 30,
    "cfg_scale": 10,
    "width": 512,
    "height": 512,
    "alwayson_scripts": {
        "AnimateDiff": {"args": [animate_diff_args]},
        "ControlNet": {"args": [control_net_args]}
    }
}

# Define headers
headers = {
    "Content-Type": "application/json"
}

# Call the API
response = requests.post(api_url, headers=headers, json=json_payload)

# Debugging
print("HTTP Status Code:", response.status_code)

# Parse the JSON response
response_json = response.json()
